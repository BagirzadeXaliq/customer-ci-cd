#name: Simple CI
#
#on:
#  pull_request:
#    branches: [ main ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Run tests
#        run: ./gradlew test

#name: Java CI with Gradle
#
#on:
#  push:
#    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: 17
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Run Unit Tests
#        run: ./gradlew test
#
#      - name: Run Checkstyle
#        run: ./gradlew checkstyleMain checkstyleTest
#
#      - name: Run OWASP Dependency Check
#        uses: dependency-check/Dependency-Check_Action@main
#        with:
#          project: 'ms-customer-ci-cd'
#          path: '.'
#          format: 'HTML'

name: CI - Build, Push & Rollout Restart

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set image tag
        id: vars
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Debug Secrets
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "::error ::DOCKER_USERNAME secret is EMPTY or NOT READABLE"
          else
            echo "::notice ::DOCKER_USERNAME secret is SET"
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_REPO }}:${{ env.TAG }} .

      - name: Push Docker Image
        run: |
          docker push $IMAGE_REPO:${{ env.TAG }}
          docker push $IMAGE_REPO:latest

      - name: Set up kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          kubectl config get-contexts
            
            # Əsas addım: yalnız image dəyişəndə rollout baş versin
      - name: Update image in K8s (no manual restart)
        run: |
          kubectl set image deployment/springboot-deployment \
          springboot-container=$IMAGE_REPO:${{ env.TAG }}

      - name: Wait for rollout to finish
        run: kubectl rollout status deployment/springboot-deployment --timeout=120s

            # İstəyə görə: uğursuzluqda rollback
      - name: Show recent events on failure
        if: failure()
        run: |
          kubectl get pods -o wide
          kubectl describe deployment springboot-deployment || true
          kubectl describe pods -l app=springboot-app || tr

#      - name: Build Docker Image
#        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-springboot-app:latest .
#
#      - name: Push Docker Image
#        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-springboot-app:latest

#      - name: Set up kubectl
#        run: |
#          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
#          kubectl version --client
#
#      - name: Restart Kubernetes Deployment
#        run: kubectl rollout restart deployment springboot-deployment